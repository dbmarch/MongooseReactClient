{"version":3,"sources":["actions/index.js","actions/action-types.js","selectors/index.js","navigation/navigation.jsx","pages/home-page.jsx","components/ui/spacer.jsx","pages/ws-page.jsx","App.js","serviceWorker.js","sagas/authenticate.js","sagas/index.js","reducers/auth-reducer.js","reducers/index.js","index.js"],"names":["actionCreator","type","payload","setAuthorized","logoutUser","getSignedInUser","isAuthenticated","state","auth","getAuthenticatedUser","connect","authenticatedUser","dispatch","logout","Navbar","style","backgroundColor","variant","expand","fixed","sticky","Brand","Nav","Link","as","NavLink","to","eventKey","className","Fragment","NavDropdown","id","title","get","alignRight","Item","Divider","onClick","useEffect","a","async","fetch","serverURI","method","headers","Accept","response","json","body","console","info","items","getJson","Container","Row","ButtonToolbar","Button","Col","xs","Spacer","lines","paddingTop","WebSocketPage","STATIC_OPTIONS","useMemo","share","onOpen","log","shouldReconnect","closeEvent","reconnectAttempts","reconnectInterval","useState","currentSocketUrl","setCurrentSocketUrl","messageHistory","setMessageHistory","useWebSocket","sendMessage","lastMessage","readyState","getWebSocket","handleClickChangeSocketUrl","useCallback","handleClickSendMessage","currentWebsocketUrl","url","prev","concat","connectionStatus","disabled","data","map","message","idx","key","App","exact","path","component","Home","Component","withRouter","Boolean","window","location","hostname","match","doLoginUser","doLogout","loginUserSaga","logoutSaga","put","takeLatest","rootSaga","fork","combineReducers","authError","action","reducer","sagaMiddleware","createSagaMiddleware","middlewares","store","next","result","getState","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b76b5c3.chunk.js","sourcesContent":["import * as action from './action-types'\nconst actionCreator = type => payload => ({ type, payload })\n\nexport const setAuthError = actionCreator(action.SET_AUTH_ERROR)\nexport const setAuthorized = actionCreator(action.SET_AUTHORIZED)\nexport const loginUser = actionCreator(action.LOGIN_USER)\nexport const logoutUser = actionCreator(action.LOGOUT_USER)\nexport const getSignedInUser = actionCreator(action.GET_SIGNED_IN_USER)\nexport const setAuthenticatedUser = actionCreator(action.SET_AUTHENTICATED_USER)\n","// LOGIN , ACCOUNT MGMT,\nexport const SET_AUTH_ERROR = 'SET_AUTH_ERROR'\nexport const SET_AUTHORIZED = 'SET_AUTHORIZED'\nexport const LOGIN_USER = 'LOGIN_USER'\nexport const LOGOUT_USER = 'LOGOUT_USER'\nexport const GET_SIGNED_IN_USER = 'GET_SIGNED_IN_USER'\nexport const SET_AUTHENTICATED_USER = 'SET_AUTHENTICATED_USER'\n","export const getAuthError = state => state.auth.authError\nexport const isAuthenticated = state => state.auth.isAuthenticated\nexport const getAuthenticatedUser = state => state.auth.getAuthenticatedUser\nexport const getUser = state => state.auth.getUser\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\n// import NavDropdown.Item from 'react-bootstrap/NavDropdown.Item'\nimport { getSignedInUser } from '../actions'\nimport { isAuthenticated, getAuthenticatedUser } from '../selectors'\nimport get from 'lodash/get'\nimport { logoutUser } from '../actions'\n\n// import NavDropdown from 'react-bootstrap/NavDropdown'\n\nconst Navigation = ({ isAuthenticated, authenticatedUser, logout }) => {\n\treturn (\n\t\t<Navbar style={{ backgroundColor: '#e0e0e0' }} variant=\"light\" expand=\"lg\" fixed=\"top\" sticky=\"top\">\n\t\t\t<Navbar.Brand>BRAND</Navbar.Brand>\n\n\t\t\t<Nav.Link as={NavLink} to=\"/\" eventKey=\"1\">\n\t\t\t\tHome{' '}\n\t\t\t</Nav.Link>\n\n\n\t\t\t<Nav.Link as={NavLink} to=\"/websocket\" eventKey=\"1\">\n\t\t\t\tWebSocket{' '}\n\t\t\t</Nav.Link>\n\n\n\t\t\t{!isAuthenticated && (\n\t\t\t\t<Nav.Link as={NavLink} to=\"/login\" eventKey=\"4\" className=\"ml-auto mr-4\">\n\t\t\t\t\tSign-In\n\t\t\t\t</Nav.Link>\n\t\t\t)}\n\n\t\t\t{isAuthenticated && (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<NavDropdown\n\t\t\t\t\t\tid=\"nav-account\"\n\t\t\t\t\t\ttitle={get(authenticatedUser, 'username', '---')}\n\t\t\t\t\t\tclassName=\"ml-auto mr-4\"\n\t\t\t\t\t\talignRight\n\t\t\t\t\t>\n\t\t\t\t\t\t<NavDropdown.Item as={'div'} eventKey=\"4.1\">\n\t\t\t\t\t\t\t<Nav.Link as={NavLink} to=\"/account\">\n\t\t\t\t\t\t\t\tManage Account\n\t\t\t\t\t\t\t</Nav.Link>\n\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t<NavDropdown.Item as={'div'} eventKey=\"4.2\" onClick={logout}>\n\t\t\t\t\t\t\t<Nav.Link as={NavLink} to=\"/\">\n\t\t\t\t\t\t\t\tLogout\n\t\t\t\t\t\t\t</Nav.Link>\n\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t</NavDropdown>\n\t\t\t\t\t{/* <div style={{ margin: '0 3rem' }} /> */}\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</Navbar>\n\t)\n}\nconst mapStateToProps = state => {\n\treturn {\n\t\tisAuthenticated: isAuthenticated(state),\n\t\tauthenticatedUser: getAuthenticatedUser(state),\n\t}\n}\n\nconst mapDispatchToProps = dispatch => ({\n\tgetSignedInUser: () => dispatch(getSignedInUser(null)),\n\tlogout: () => dispatch(logoutUser(null)),\n})\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(Navigation)","import React, {useEffect} from 'react'\nimport { connect } from 'react-redux'\nimport {Row, Col, Container, Button, ButtonToolbar} from 'react-bootstrap'\nimport {serverURI} from '../App.js'\n\nconst HomePage = () => {\n  const message =  \"Hello\"\n\n  useEffect(() => {\n    const getJson = async () =>  {\n        const response = await fetch(`${serverURI}/json/`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            }\n        })\n\n        const body = await response.json()\n        console.info (body.items)\n    }\n\n    getJson()\n\n}, [])\n\n\n\n  return (\n      <div className = \"page\">\n       <Container className = 'home-page-frame'>\n        <Container className='home-page-top' >\n          <Row>\n            <ButtonToolbar className='button-tray'>\n              <Button variant = 'outline-primary' >JSON</Button>\n              <Button variant = 'outline-success'>Hello</Button>\n            </ButtonToolbar>\n          </Row>\n          <Row>\n            <Col>\n              <p>Response:</p>\n            </Col>\n            <Col xs={9}>\n              <p>{message}</p>\n            </Col>\n          </Row>\n        </Container>\n        <Container className='home-page-bottom' >\n          <Row>\n            <Col>1 of 2</Col>\n            <Col xs={9}>2 of 2</Col>\n          </Row>\n      </Container>\n      </Container>      \n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HomePage)","import React from 'react'\n\nconst Spacer = ({ lines }) => {\n\treturn <div style={{ paddingTop: `${lines}rem` }} />\n}\n\nexport default Spacer","import React, { useState, useCallback, useEffect, useMemo } from 'react'\nimport useWebSocket from 'react-use-websocket'\nimport Spacer from '../components/ui/spacer'\n\nconst SOCKET_URL_ONE = 'ws://localhost:8000'\nconst SOCKET_URL_TWO = 'wss://localhost:8000'\n\n\n\n\nconst CONNECTION_STATUS_CONNECTING = 0\nconst CONNECTION_STATUS_OPEN = 1\nconst CONNECTION_STATUS_CLOSING = 2\nconst CONNECTION_STATUS_CLOSED = 3\n\nexport const WebSocketPage = () => {\n  const STATIC_OPTIONS = useMemo(() => ({\n    share: true,\n    onOpen: ()=> console.log ('opened'),\n    shouldReconnect: (closeEvent) => true,\n    reconnectAttempts: 10,\n    reconnectInterval: 3000,\n  }), []);\n  \n  const [currentSocketUrl, setCurrentSocketUrl] = useState(SOCKET_URL_ONE)\n  const [messageHistory, setMessageHistory] = useState([]);\n  const [sendMessage, lastMessage, readyState, getWebSocket] = useWebSocket(currentSocketUrl, STATIC_OPTIONS);\n\n \n  const handleClickChangeSocketUrl = useCallback(() => {\n    currentSocketUrl === SOCKET_URL_ONE ? setCurrentSocketUrl(SOCKET_URL_TWO) : setCurrentSocketUrl (SOCKET_URL_ONE)\n  }, [currentSocketUrl])\n\n  const handleClickSendMessage = useCallback(() => sendMessage('Hello'), [sendMessage])\n \n  useEffect(() => {\n    if (lastMessage !== null) {\n      \n      //getWebSocket returns the WebSocket wrapped in a Proxy. This is to restrict actions like mutating a shared websocket, overwriting handlers, etc\n      const currentWebsocketUrl = getWebSocket().url;\n      console.log('received a message from ', currentWebsocketUrl);\n      \n      setMessageHistory(prev => prev.concat(lastMessage));\n    }\n  }, [lastMessage, getWebSocket]);\n \n  const connectionStatus = {\n    [CONNECTION_STATUS_CONNECTING]: 'Connecting',\n    [CONNECTION_STATUS_OPEN]: 'Open',\n    [CONNECTION_STATUS_CLOSING]: 'Closing',\n    [CONNECTION_STATUS_CLOSED]: 'Closed',\n  }[readyState];\n \n  return (\n    <div>\n      <button onClick={handleClickChangeSocketUrl}>{currentSocketUrl}</button>\n      <Spacer lines={2} />\n      <button onClick={handleClickSendMessage} disabled={readyState !== CONNECTION_STATUS_OPEN}>Click Me to send 'Hello'</button>\n      <Spacer lines={2} />\n      <span>Websocket Status: {connectionStatus}</span>\n      <Spacer lines={2} />\n      {lastMessage && <span>Last message: {lastMessage.data}</span>}\n      <Spacer lines={2} />\n      <ul>\n        {messageHistory.map((message, idx) => <li key={idx}>{message.data}</li>)}\n      </ul>\n    </div>\n  );\n};\n \nexport default WebSocketPage;","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport './App.css'\nimport Navigation from './navigation/navigation'\nimport { Route, Switch, withRouter } from 'react-router-dom'\nimport { isAuthenticated } from './selectors'\n\nimport Home from './pages/home-page'\nimport WebSocketPage from './pages/ws-page'\n\nexport const serverURI = 'http://localhost:8000'\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Navigation />\n\t\t\t\t<div className=\"page\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t\t\t\t<Route path=\"/login\" component={Home} />\n\t\t\t\t\t\t<Route path=\"/websocket\" component={WebSocketPage} />\n\t\t\t\t\t\t<Route component={Home} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t\t</React.Fragment>\n\n\t\t)\n\t}\n}\nconst mapStateToProps = state => {\n\treturn {\n\t\tisAuthenticated: isAuthenticated(state),\n\t}\n}\n\nexport default withRouter(\n\tconnect(\n\t\tmapStateToProps,\n\t\tnull\n\t)(App)\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { takeLatest, select, put } from 'redux-saga/effects'\n\nimport {\n\tLOGIN_USER,\n\t// REGISTER_USER,\n\t// CONFIRM_USER,\n\t// RESEND_CONFIRMATION_CODE,\n\tGET_SIGNED_IN_USER,\n\tLOGOUT_USER,\n} from '../actions/action-types'\n\nimport { getUser } from '../selectors'\nimport { setAuthorized } from '../actions'\n// import { idTokenSelector } from '../selectors/authSelectors'\n// import Promise from 'bluebird'\n// import get from 'lodash/get'\n\n// const loginAsync = user => {\n// }\n\n\nexport function* doLoginUser() {\n  console.info('doLoginUser')\n  \n  // const user = yield select(getUser)\n  yield put (setAuthorized(true))\n\n\t// if (!user.username && !user.password) {\n\t// \tyield put(setAuthError('require username & password'))\n\t// \treturn\n\t// }\n\t// console.info('user', user)\n\n\t// try {\n\t// \tconst session = yield call(loginAsync, user)\n\t// \tyield put(setSession(session))\n\t// \tyield put(setAuthenticatedUser(userPool.getCurrentUser()))\n\t// \tconst idToken = yield select(idTokenSelector)\n\t// \tyield call(obtainCredentialsAsync, idToken)\n\t// \tyield put(setAuthorized(session.isValid()))\n\t// \tconsole.info('Session: ', session)\n\t// } catch (err) {\n\t// \tyield put(setAuthError({ error: err.code, description: err.message }))\n\t// }\n}\n\n\n\nexport function* doGetSignedInUser() {\n\tconsole.info('doGetSignedInUser')\n\tconst user = yield select(getUser)\n\n\tif (!user.username) {\n\t\tconsole.error('user name is required ', user)\n\t\treturn\n\t}\n\n\t// try {\n\t// \tconst session = yield call(obtainSessionAsync)\n\t// \tconsole.info('Session', session)\n\t// \tyield put(setSession(session))\n\t// \tyield put(setAuthorized(session.isValid()))\n\t// \tconsole.info('currentUser = ', userPool.getCurrentUser())\n\t// } catch (err) {\n\t// \tconsole.error('Get signed in user failed ', err)\n\t// \tyield put(setAuthError({ error: err.code, description: err.message }))\n\t// }\n}\n\nfunction* doLogout() {\n\tconsole.info('doLogout')\n\n\t// try {\n\t// \tuserPool.getCurrentUser().signOut()\n\t// } catch (err) {\n\t// \tconsole.info(err)\n\t// }\n\ttry {\n\t\tyield put(setAuthorized(false))\n\t\t// yield put(setSession({}))\n\t} catch (err) {\n\t\tconsole.info(err)\n\t}\n}\n\nexport function* loginUserSaga() {\n\tconsole.info('Saga-loginUser')\n\tyield takeLatest(LOGIN_USER, doLoginUser)\n}\n\nexport function* getSignedInUserSaga() {\n\tconsole.info('Saga-getSignedInUser')\n\tyield takeLatest(GET_SIGNED_IN_USER, doGetSignedInUser)\n}\n\nexport function* logoutSaga() {\n\tconsole.info('Saga-getSignedInUser')\n\tyield takeLatest(LOGOUT_USER, doLogout)\n}","import { fork } from 'redux-saga/effects'\nimport {\n\tloginUserSaga,\n\tlogoutSaga\n} from './authenticate'\n\nexport default function* rootSaga() {\n\tyield fork(loginUserSaga)\n\tyield fork(logoutSaga)\n}","import {\n  SET_AUTHORIZED,\n  SET_AUTH_ERROR,\n  LOGIN_USER,\n  LOGOUT_USER,\n} from '../actions/action-types'\n\nimport { combineReducers } from 'redux'\n\n// Saves the access token\nconst isAuthenticated = (state = false, action = {}) => {\n\tswitch (action.type) {\n    case LOGIN_USER:\n    case LOGOUT_USER:\n      return false;\n\n\t\tcase SET_AUTHORIZED:\n\t\t\treturn action.payload\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\n// Saves the error\nconst authError = (state = null, action = {}) => {\n\tswitch (action.type) {\n\t\tcase SET_AUTH_ERROR:\n\t\t\treturn action.payload\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\n\nexport default combineReducers({\n\tauthError,\n\tisAuthenticated,\n})","import { combineReducers } from 'redux'\nimport auth from './auth-reducer'\n\nconst reducer = combineReducers({\n\tauth,\n})\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { Provider } from 'react-redux'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from './sagas'\n\n\nimport rootReducer from './reducers/'\n\nconst logger = store => {\n\treturn next => {\n\t\treturn action => {\n\t\t\tconsole.log('[Middleware] Dispatching ', action)\n\t\t\tconst result = next(action)\n\t\t\tconsole.log('[Middleware] next state ', store.getState())\n\t\t\treturn result\n\t\t}\n\t}\n}\n\n\nconst sagaMiddleware = createSagaMiddleware()\nconst middlewares = [sagaMiddleware, logger]\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares)))\n\nsagaMiddleware.run(rootSaga)\n\nconst app = (\n\t<Provider store={store}>\n\t\t<BrowserRouter>\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t</Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}